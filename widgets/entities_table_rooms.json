{
  "widget": {
    "type": "latest",
    "sizeX": 7.5,
    "sizeY": 6.5,
    "config": {
      "timewindow": {
        "displayValue": "",
        "selectedTab": 0,
        "realtime": {
          "realtimeType": 1,
          "interval": 1000,
          "timewindowMs": 60000,
          "quickInterval": "CURRENT_DAY",
          "hideInterval": false,
          "hideLastInterval": false,
          "hideQuickInterval": false
        },
        "history": {
          "historyType": 0,
          "interval": 1000,
          "timewindowMs": 60000,
          "fixedTimewindow": {
            "startTimeMs": 1667907617961,
            "endTimeMs": 1667994017961
          },
          "quickInterval": "CURRENT_DAY",
          "hideInterval": false,
          "hideLastInterval": false,
          "hideFixedInterval": false,
          "hideQuickInterval": false
        },
        "aggregation": {
          "type": "NONE",
          "limit": 200
        }
      },
      "showTitle": true,
      "backgroundColor": "rgb(255, 255, 255)",
      "color": "rgba(0, 0, 0, 0.87)",
      "padding": "0px",
      "settings": {
        "entitiesTitle": "Rooms",
        "enableSearch": true,
        "enableSelectColumnDisplay": true,
        "enableStickyHeader": true,
        "enableStickyAction": true,
        "showCellActionsMenu": true,
        "reserveSpaceForHiddenAction": "true",
        "displayEntityName": false,
        "entityNameColumnTitle": "",
        "displayEntityLabel": false,
        "entityLabelColumnTitle": "",
        "displayEntityType": false,
        "displayPagination": true,
        "defaultPageSize": 10,
        "pageStepCount": 3,
        "pageStepIncrement": 10,
        "defaultSortOrder": "Name",
        "useRowStyleFunction": false,
        "rowStyleFunction": ""
      },
      "title": "New Entities table",
      "dropShadow": false,
      "enableFullscreen": false,
      "titleStyle": null,
      "useDashboardTimewindow": false,
      "showLegend": false,
      "datasources": [
        {
          "type": "entity",
          "name": null,
          "entityAliasId": "cd737d26-3068-aae0-d370-c93f8e7e1a00",
          "filterId": null,
          "dataKeys": [
            {
              "name": "name",
              "type": "entityField",
              "label": "Name",
              "color": "#ffc107",
              "settings": {
                "columnWidth": "30%",
                "useCellStyleFunction": false,
                "useCellContentFunction": false,
                "defaultColumnVisibility": "visible",
                "columnSelectionToDisplay": "enabled",
                "columnExportOption": "onlyVisible"
              },
              "_hash": 0.7231686834210371,
              "aggregationType": null,
              "units": null,
              "decimals": null,
              "funcBody": null,
              "usePostProcessing": null,
              "postFuncBody": null
            },
            {
              "name": "label",
              "type": "entityField",
              "label": "Label",
              "color": "#2196f3",
              "settings": {
                "customTitle": "",
                "columnWidth": "30%",
                "useCellStyleFunction": true,
                "cellStyleFunction": "return {\n    fontWeight: 600\n};",
                "useCellContentFunction": true,
                "useCellContentFunctionOnExport": true,
                "cellContentFunction": {
                  "body": "return qc.getLabel(value);",
                  "modules": {
                    "qc": "tb-resource;/api/resource/js_module/tenant/QC Module.js"
                  }
                },
                "defaultColumnVisibility": "visible",
                "columnSelectionToDisplay": "enabled",
                "columnExportOption": "onlyVisible",
                "disableSorting": false
              },
              "_hash": 0.7427597097428846,
              "aggregationType": null,
              "units": null,
              "decimals": null,
              "funcBody": null,
              "usePostProcessing": null,
              "postFuncBody": null
            },
            {
              "name": "cropType",
              "type": "attribute",
              "label": "Crop type",
              "color": "#4caf50",
              "settings": {
                "columnWidth": "20%",
                "useCellStyleFunction": false,
                "useCellContentFunction": false,
                "defaultColumnVisibility": "visible",
                "columnSelectionToDisplay": "enabled",
                "columnExportOption": "onlyVisible"
              },
              "_hash": 0.45735173845667054,
              "aggregationType": null,
              "units": null,
              "decimals": null,
              "funcBody": null,
              "usePostProcessing": null,
              "postFuncBody": null
            },
            {
              "name": "avgMoisture",
              "type": "timeseries",
              "label": " Average moisture",
              "color": "#f44336",
              "settings": {
                "customTitle": "",
                "columnWidth": "20%",
                "useCellStyleFunction": false,
                "cellStyleFunction": "",
                "useCellContentFunction": true,
                "useCellContentFunctionOnExport": true,
                "cellContentFunction": {
                  "body": "return qc.getProgressbar(value, entity);",
                  "modules": {
                    "qc": "tb-resource;/api/resource/js_module/tenant/QC Module.js"
                  }
                },
                "defaultColumnVisibility": "visible",
                "columnSelectionToDisplay": "enabled",
                "columnExportOption": "onlyVisible",
                "disableSorting": false
              },
              "_hash": 0.017767185128356955,
              "aggregationType": "NONE",
              "units": "%",
              "decimals": 0,
              "funcBody": null,
              "usePostProcessing": null,
              "postFuncBody": null
            },
            {
              "name": "minMoistureThreshold",
              "type": "attribute",
              "label": "minMoistureThreshold",
              "color": "#8bc34a",
              "settings": {
                "columnWidth": "0px",
                "useCellStyleFunction": false,
                "useCellContentFunction": false,
                "defaultColumnVisibility": "hidden",
                "columnSelectionToDisplay": "disabled",
                "columnExportOption": "onlyVisible"
              },
              "_hash": 0.5565658823011432,
              "aggregationType": null,
              "units": null,
              "decimals": null,
              "funcBody": null,
              "usePostProcessing": null,
              "postFuncBody": null
            },
            {
              "name": "maxMoistureThreshold",
              "type": "attribute",
              "label": "maxMoistureThreshold",
              "color": "#3f51b5",
              "settings": {
                "columnWidth": "0px",
                "useCellStyleFunction": false,
                "useCellContentFunction": false,
                "defaultColumnVisibility": "hidden",
                "columnSelectionToDisplay": "disabled",
                "columnExportOption": "onlyVisible"
              },
              "_hash": 0.860782325530304,
              "aggregationType": null,
              "units": null,
              "decimals": null,
              "funcBody": null,
              "usePostProcessing": null,
              "postFuncBody": null
            },
            {
              "name": "irrigationState",
              "type": "timeseries",
              "label": "Irrigation",
              "color": "#8bc34a",
              "settings": {
                "columnWidth": "0px",
                "useCellStyleFunction": false,
                "useCellContentFunction": true,
                "cellContentFunction": "var text = value === 'ON' ? 'On' : 'Off';\nvar color = value === 'ON' ? '#198038' : 'red';\nreturn '<div><span style=\"width: 4px; height: 4px; border-radius: 2px; background: '+color+'; display: inline-block; vertical-align: middle;\"></span><span style=\"padding-left: 8px;\">'+text+'</span></div>';",
                "defaultColumnVisibility": "visible",
                "columnSelectionToDisplay": "enabled",
                "columnExportOption": "onlyVisible"
              },
              "_hash": 0.20197437452090683,
              "aggregationType": "NONE",
              "units": null,
              "decimals": null,
              "funcBody": null,
              "usePostProcessing": null,
              "postFuncBody": null
            }
          ],
          "alarmFilterConfig": {
            "statusList": [
              "ACTIVE"
            ]
          }
        }
      ],
      "displayTimewindow": true,
      "actions": {
        "rowClick": [
          {
            "name": "Field details",
            "icon": "more_horiz",
            "useShowWidgetActionFunction": null,
            "showWidgetActionFunction": "return true;",
            "type": "openDashboardState",
            "targetDashboardStateId": "field",
            "setEntityId": true,
            "stateEntityParamName": null,
            "openRightLayout": false,
            "openInSeparateDialog": false,
            "openInPopover": false,
            "id": "9fac49b3-0e6b-9beb-56a7-6da9cec34984"
          }
        ],
        "headerButton": [
          {
            "name": "Create field",
            "icon": "add",
            "useShowWidgetActionFunction": null,
            "showWidgetActionFunction": "return true;",
            "type": "customPretty",
            "customHtml": "<form #addFieldForm=\"ngForm\" [formGroup]=\"addFieldFormGroup\"\n      (ngSubmit)=\"submit()\" class=\"sf-field-form\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>{{ step === 1 ? 'Add field' : 'Setup field polygon' }}</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <section *ngIf=\"step === 1\" class=\"flex flex-col\">\n      <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Field Name</mat-label>\n          <input matInput formControlName=\"name\" required>\n          <mat-error *ngIf=\"addFieldFormGroup.get('name').hasError('required')\">\n            Field name is required.\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Label</mat-label>\n          <input matInput formControlName=\"label\">\n        </mat-form-field>\n      </div>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Crop type</mat-label>\n        <mat-select matInput formControlName=\"cropType\" required panelClass=\"sf-field-form\">\n          <mat-option *ngFor=\"let cropType of cropTypes\" [value]=\"cropType\">\n            {{ cropType }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"addFieldFormGroup.get('cropType').hasError('required')\">\n          Crop type is required.\n        </mat-error>\n      </mat-form-field>\n      <span class=\"title-modal\" style=\"padding-left: 8px;\">Moisture thresholds</span>\n      <div class=\"flex flex-col\">\n        <div class=\"flex flex-row items-center justify-between\" style=\"padding: 0 8px;\">\n          <label class=\"tb-small\">Min</label>\n          <label class=\"tb-small threshold-value\">{{ addFieldFormGroup.get('minMoistureThreshold').value }}%</label>\n        </div>\n        <mat-slider\n            color=\"primary\"\n            discrete\n            [displayWith]=\"formatMoistureThreshold\"\n            tickInterval=\"auto\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            aria-label=\"Minimum moisture threshold\"><input matSliderThumb formControlName=\"minMoistureThreshold\"/>\n        </mat-slider>\n      </div>\n      <div class=\"flex flex-col\">\n        <div class=\"flex flex-row items-center justify-between\" style=\"padding: 0 8px;\">\n          <label class=\"tb-small\">Max</label>\n          <label class=\"tb-small threshold-value\">{{ addFieldFormGroup.get('maxMoistureThreshold').value }}%</label>\n        </div>\n        <mat-slider\n            color=\"primary\"\n            discrete\n            [displayWith]=\"formatMoistureThreshold\"\n            tickInterval=\"auto\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            aria-label=\"Maximum moisture threshold\"><input matSliderThumb formControlName=\"maxMoistureThreshold\"/>\n        </mat-slider>\n      </div>\n    </section>\n    <section *ngIf=\"step === 2\" class=\"flex flex-col\">\n      <tb-dashboard-state\n          style=\"height: 600px; width: 100%;\"\n          [ctx]=\"widgetContext\"\n          stateId=\"setup_field_polygon\"\n          [entityId]=\"field.id\">\n      </tb-dashboard-state>\n    </section>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n    <button *ngIf=\"step === 1\" mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button *ngIf=\"step === 1\" mat-button mat-raised-button color=\"primary\"\n            type=\"button\"\n            (click)=\"next()\"\n            [disabled]=\"(isLoading$ | async) || addFieldFormGroup.invalid\">\n      Next\n    </button>\n    <button *ngIf=\"step === 2\" mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"back()\" cdkFocusInitial>\n      Back\n    </button>\n    <button *ngIf=\"step === 2\" mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || addFieldFormGroup.invalid || !hasPolygon\">\n      Create\n    </button>\n  </div>\n</form>\n",
            "customCss": ".sf-field-form {\n    width: 800px;\n}\n\n.sf-field-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-field-form .mat-mdc-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-field-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-field-form .mat-datetimepicker-clock-center, .sf-field-form .mat-datetimepicker-clock-hand, .sf-field-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard, .sf-field-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-field-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-field-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-field-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-field-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-field-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator,\n.sf-field-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .threshold-value {\n    color: #fff;\n    font-weight: 500;\n    background: #6F74F2;\n    border-radius: 16px;\n    width: 32px;\n    height: 32px;\n    line-height: 32px;\n    text-align: center;\n}\n\n",
            "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenAddFieldDialog();\n\nfunction openAddFieldDialog() {\n    customDialog.customDialog(htmlTemplate, AddFieldDialogController).subscribe();\n}\n\nfunction AddFieldDialogController(instance) {\n    let vm = instance;\n    \n    vm.cropTypes = ['rice', 'corn', 'wheat', \n    'sugarcane', 'maize (corn)', 'soybean oil', 'palm oil', 'potatoes',\n    'cassava', 'legume pulses', 'sunflower seed oil', 'rape and mustard oil',\n    'other vegetables', 'other fruits', 'sorghum', 'millet', 'groundnuts', 'beans',\n    'sweet potatoes', 'bananas', 'various nuts', 'soybeans', 'cottonseed oil',\n    'groundnut oil', 'yams'];\n    \n    vm.widgetContext = widgetContext;\n    vm.step = 1;\n    vm.field = null;\n    \n    vm.hasPolygon = false;\n    vm.polygonSubscription = null;\n\n\n    vm.addFieldFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      label: [null],\n      cropType: ['wheat', [vm.validators.required]],\n      minMoistureThreshold: [25, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]],\n      maxMoistureThreshold: [75, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]]\n    });\n\n    vm.cancel = function() {\n        cancelPolygonSubscription();\n        deleteEntityObservable().subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    vm.next = function() {\n        vm.addFieldFormGroup.markAsPristine();\n        saveEntityObservable().subscribe(\n            function (entity) {\n                vm.field = entity;\n                widgetContext.rxjs.forkJoin([\n                    saveAttributes(entity.id),\n                ]).subscribe(\n                    function () {\n                        createPolygonSubscription().subscribe(\n                            function() {\n                                vm.step = 2;\n                            }\n                        );\n                    }\n                );\n            }\n        );\n    };\n    \n    vm.back = function() {\n        cancelPolygonSubscription();\n        vm.step = 1;\n    }\n    \n    vm.submit = function() {\n        cancelPolygonSubscription();\n        widgetContext.updateAliases();\n        vm.dialogRef.close(null);\n    }\n    \n    vm.formatMoistureThreshold = function(value) {\n        return value + '%';\n    }\n    \n    function createPolygonSubscription() {\n        var subscriptionInfo = {\n            type: 'entity',\n            entityType: vm.field.id.entityType,\n            entityId: vm.field.id.id,\n            attributes: [{ name: 'perimeter' }]\n        };\n        var options = {\n            callbacks: {\n                onDataUpdated: function(subscription) {\n                    checkHasPolygon(subscription.data);\n                }\n            }\n        };\n        return widgetContext.subscriptionApi.createSubscriptionFromInfo(\n                            'latest', [ subscriptionInfo ], options, false, true).pipe(\n            widgetContext.rxjs.tap(function(polygonSubscription) {\n                vm.polygonSubscription = polygonSubscription;\n            })\n        );\n        \n    }\n    \n    function checkHasPolygon(data) {\n        var datasourceData = data[0].data;\n        var keyData = datasourceData[0];\n        var value = keyData[1];\n        if (value && Array.isArray(JSON.parse(value))) {\n            vm.hasPolygon = true;\n        } else {\n            vm.hasPolygon = false;\n        }\n    }\n    \n    function cancelPolygonSubscription() {\n        if (vm.polygonSubscription) {\n            widgetContext.subscriptionApi.removeSubscription(vm.polygonSubscription.id);\n            vm.polygonSubscription = null;\n        }\n    }\n\n    function saveEntityObservable() {\n        return getOrCreateSmartIrrigationAssetGroup().pipe(\n          widgetContext.rxjs.switchMap((smartIrrigation) => {\n            const formValues = vm.addFieldFormGroup.value;\n            let field = {\n                name: formValues.name,\n                type: 'SI Field',\n                label: formValues.label\n            };\n            if (vm.field) {\n                field.id = vm.field.id;\n            }\n            return assetService.saveAsset(field, smartIrrigation.id.id);\n          })\n        );\n    }\n    \n    function deleteEntityObservable() {\n        if (vm.field) {\n            return assetService.deleteAsset(vm.field.id.id);\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n\n    function saveAttributes(entityId) {\n        let cropType = vm.addFieldFormGroup.get('cropType').value;\n        let minMoistureThreshold = vm.addFieldFormGroup.get('minMoistureThreshold').value;\n        let maxMoistureThreshold = vm.addFieldFormGroup.get('maxMoistureThreshold').value;\n        let attributesArray = [\n            {key: 'cropType', value: cropType},\n            {key: 'minMoistureThreshold', value: minMoistureThreshold},\n            {key: 'maxMoistureThreshold', value: maxMoistureThreshold}\n        ];\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n    \n    function getOrCreateSmartIrrigationAssetGroup() {\n      return getEntityGroupByName(\"Smart Irrigation\", \"ASSET\").pipe(\n          widgetContext.rxjs.switchMap((group) => {\n              if (group) {\n                  return widgetContext.rxjs.of(group);\n              } else {\n                  var smartIrrigation = {\n                    type: 'ASSET',\n                    name: 'Smart Irrigation'\n                  };\n                  return entityGroupService.saveEntityGroup(smartIrrigation);\n              }\n          })\n      );\n    }\n    \n    function getEntityGroupByName(groupName, groupType) {\n      var entityGroupsPageLink = widgetContext.pageLink(10, 0, groupName);\n      return entityGroupService.getEntityGroupsByPageLink(entityGroupsPageLink, groupType, {ignoreLoading: true}).pipe(\n          widgetContext.rxjs.map((data) => {\n            if (data.data.length) {\n                return data.data.find((group) => group.name === groupName);\n            } else {\n                return null;\n            }\n          })\n      );\n    }\n\n}\n",
            "customResources": [],
            "openInSeparateDialog": false,
            "openInPopover": false,
            "id": "5b9d0130-b8ab-4103-0223-90a4530d425f"
          }
        ],
        "actionCellButton": [
          {
            "name": "Edit field",
            "icon": "edit",
            "useShowWidgetActionFunction": null,
            "showWidgetActionFunction": "return true;",
            "type": "customPretty",
            "customHtml": "<form #addFieldForm=\"ngForm\" [formGroup]=\"editFieldFormGroup\"\n      (ngSubmit)=\"save()\" class=\"sf-field-form\">\n  <mat-toolbar class=\"flex flex-row\" color=\"primary\">\n    <h2>Edit field '{{ entityName }}'</h2>\n    <span class=\"flex-1\"></span>\n    <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n      <mat-icon class=\"material-icons\">close</mat-icon>\n    </button>\n  </mat-toolbar>\n  <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n  </mat-progress-bar>\n  <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n  <div mat-dialog-content class=\"flex flex-col\">\n    <section class=\"flex flex-col\">\n      <div class=\"flex flex-row gap-2 xs:flex-col xs:gap-0\">\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Field Name</mat-label>\n          <input matInput formControlName=\"name\" required>\n          <mat-error *ngIf=\"editFieldFormGroup.get('name').hasError('required')\">\n            Field name is required.\n          </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"mat-block flex-1\">\n          <mat-label>Label</mat-label>\n          <input matInput formControlName=\"label\">\n        </mat-form-field>\n      </div>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Crop type</mat-label>\n        <mat-select matInput formControlName=\"cropType\" required panelClass=\"sf-field-form\">\n          <mat-option *ngFor=\"let cropType of cropTypes\" [value]=\"cropType\">\n            {{ cropType }}\n          </mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"editFieldFormGroup.get('cropType').hasError('required')\">\n          Crop type is required.\n        </mat-error>\n      </mat-form-field>\n      <span class=\"title-modal\" style=\"padding-left: 8px;\">Moisture thresholds</span>\n      <div class=\"flex flex-col\">\n        <div class=\"flex flex-row items-center justify-between\" style=\"padding: 0 8px;\">\n          <label class=\"tb-small\">Min</label>\n          <label class=\"tb-small threshold-value\">{{ editFieldFormGroup.get('minMoistureThreshold').value }}%</label>\n        </div>\n        <mat-slider\n            color=\"primary\"\n            discrete\n            [displayWith]=\"formatMoistureThreshold\"\n            tickInterval=\"auto\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            aria-label=\"Minimum moisture threshold\"><input matSliderThumb formControlName=\"minMoistureThreshold\"/>\n        </mat-slider>\n      </div>\n      <div class=\"flex flex-col\">\n        <div class=\"flex flex-row items-center justify-between\" style=\"padding: 0 8px;\">\n          <label class=\"tb-small\">Max</label>\n          <label class=\"tb-small threshold-value\">{{ editFieldFormGroup.get('maxMoistureThreshold').value }}%</label>\n        </div>\n        <mat-slider\n            color=\"primary\"\n            discrete\n            [displayWith]=\"formatMoistureThreshold\"\n            tickInterval=\"auto\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            aria-label=\"Maximum moisture threshold\"><input matSliderThumb formControlName=\"maxMoistureThreshold\"/>\n        </mat-slider>\n      </div>\n    </section>\n    <section class=\"flex flex-col\">\n      <tb-dashboard-state\n          style=\"height: 600px; width: 100%;\"\n          [ctx]=\"widgetContext\"\n          stateId=\"setup_field_polygon\"\n          [entityId]=\"entityId\">\n      </tb-dashboard-state>\n    </section>\n  </div>\n  <div mat-dialog-actions class=\"flex flex-row items-center justify-end\">\n    <button mat-button color=\"primary\"\n            type=\"button\"\n            [disabled]=\"(isLoading$ | async)\"\n            (click)=\"cancel()\" cdkFocusInitial>\n      Cancel\n    </button>\n    <button mat-button mat-raised-button color=\"primary\"\n            type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editFieldFormGroup.invalid || !(editFieldFormGroup.dirty || polygonChanged) || !hasPolygon\">\n      Save\n    </button>\n  </div>\n</form>\n",
            "customCss": ".sf-field-form {\n    width: 800px;\n}\n\n.sf-field-form .mat-toolbar.mat-primary {\n    background: #fff;\n    color: rgba(0, 0, 0, 0.87);\n}\n\n.sf-field-form .mat-mdc-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-icon-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-field-form .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-form .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-form .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-field-form .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-form-field .mdc-text-field--focused .mdc-floating-label {\n    color: #5553AF;\n}\n\n.sf-field-form .mdc-text-field--filled .mdc-line-ripple::after {\n    border-bottom-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__handle::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::after, \n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch.mdc-switch--selected.mdc-switch--checked .mdc-switch__ripple::before {\n    background-color: #6F74F2 !important;\n}\n\n.sf-field-form .mat-mdc-slide-toggle.mat-accent .mdc-switch .mdc-switch__track::after {\n    background: rgba(111, 116, 242, 0.54) !important;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-header {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-selected {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected {\n    background-color: #8689f4;\n}\n\n.sf-field-form .mat-datetimepicker-clock-center, .sf-field-form .mat-datetimepicker-clock-hand, .sf-field-form .mat-datetimepicker-clock-hand:before {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-datetimepicker-calendar-body-cell-content.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected) {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .mat-icon {\n    color: #868D9C;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard, .sf-field-form .mat-button-toggle-standalone.mat-button-toggle-appearance-standard {\n    border: none;\n}\n\n.sf-field-form .mat-button-toggle {\n    background: rgba(0, 0, 0, 0.06);\n    height: 32px;\n    align-items: center;\n    display: flex;\n}\n\n.sf-field-form .mat-button-toggle-checked .mat-button-toggle-button {\n    background-color: #fff;\n    border-radius: 4px;\n    margin-left: 2px;\n    margin-right: 2px;\n}\n\n.sf-field-form .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n    line-height: 28px;\n    font-size: 14px;\n}\n\n.sf-field-form .mat-button-toggle-group-appearance-standard .mat-button-toggle+.mat-button-toggle {\n    border-left: none;\n}\n\n.sf-field-form .mat-button-toggle-checked.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay {\n    opacity: .01;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat {\n    padding: 0 15px;\n    min-width: 0;\n}\n\n.sf-field-form .mat-mdc-button.weekly-repeat.no-border {\n    border: 1px solid #6F74F2;\n}\n\n.sf-field-form.mat-primary .mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text {\n    color: #5553AF;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator,\n.sf-field-form .mat-mdc-slider .mdc-slider__track--inactive {\n    background-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator::before {\n    border-top-color: #6F74F2;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__value-indicator {\n    opacity: 1;\n}\n\n.sf-field-form .mat-mdc-slider .mdc-slider__track--active_fill,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb-knob,\n.sf-field-form .mat-mdc-slider .mdc-slider__thumb--focused .mdc-slider__thumb-knob {\n    border-color: #6F74F2;\n}\n\n.sf-field-form .title-modal {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 130%;\n    color: #868D9C;\n    padding-bottom: 8px;\n}\n\n.sf-field-form .threshold-value {\n    color: #fff;\n    font-weight: 500;\n    background: #6F74F2;\n    border-radius: 16px;\n    width: 32px;\n    height: 32px;\n    line-height: 32px;\n    text-align: center;\n}\n\n",
            "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\nopenEditFieldDialog();\n\nfunction openEditFieldDialog() {\n    customDialog.customDialog(htmlTemplate, EditFieldDialogController).subscribe();\n}\n\nfunction EditFieldDialogController(instance) {\n    let vm = instance;\n    \n    vm.entityName = entityName;\n    vm.entityId = entityId;\n    \n    vm.cropTypes = ['rice', 'corn', 'wheat', \n    'sugarcane', 'maize (corn)', 'soybean oil', 'palm oil', 'potatoes',\n    'cassava', 'legume pulses', 'sunflower seed oil', 'rape and mustard oil',\n    'other vegetables', 'other fruits', 'sorghum', 'millet', 'groundnuts', 'beans',\n    'sweet potatoes', 'bananas', 'various nuts', 'soybeans', 'cottonseed oil',\n    'groundnut oil', 'yams'];\n    \n    vm.widgetContext = widgetContext;\n    vm.field = null;\n    \n    vm.perimeter = null;\n    vm.hasPolygon = false;\n    vm.polygonChanged = false;\n    vm.polygonSubscription = null;\n\n\n    vm.editFieldFormGroup = vm.fb.group({\n      name: ['', [vm.validators.required]],\n      label: [null],\n      cropType: [null, [vm.validators.required]],\n      minMoistureThreshold: [null, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]],\n      maxMoistureThreshold: [null, [vm.validators.required, vm.validators.min(0), vm.validators.max(100)]]\n    });\n\n    vm.cancel = function() {\n        cancelPolygonSubscription();\n        restorePolygon().subscribe(\n            function () {\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    vm.save = function() {\n        vm.editFieldFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveField()\n        ]).subscribe(\n            function () {\n                cancelPolygonSubscription();\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    vm.formatMoistureThreshold = function(value) {\n        return value + '%';\n    }\n    \n    loadField();\n    \n    function createPolygonSubscription() {\n        var subscriptionInfo = {\n            type: 'entity',\n            entityType: vm.field.id.entityType,\n            entityId: vm.field.id.id,\n            attributes: [{ name: 'perimeter' }]\n        };\n        var options = {\n            callbacks: {\n                onDataUpdated: function(subscription) {\n                    checkPolygon(subscription.data);\n                }\n            }\n        };\n        return widgetContext.subscriptionApi.createSubscriptionFromInfo(\n                            'latest', [ subscriptionInfo ], options, false, true).pipe(\n            widgetContext.rxjs.tap(function(polygonSubscription) {\n                vm.polygonSubscription = polygonSubscription;\n            })\n        );\n        \n    }\n    \n    function checkPolygon(data) {\n        var datasourceData = data[0].data;\n        var keyData = datasourceData[0];\n        var value = keyData[1];\n        if (value && Array.isArray(JSON.parse(value))) {\n            vm.hasPolygon = true;\n        } else {\n            vm.hasPolygon = false;\n        }\n        vm.polygonChanged = vm.perimeter !== value;\n    }\n    \n    function cancelPolygonSubscription() {\n        if (vm.polygonSubscription) {\n            widgetContext.subscriptionApi.removeSubscription(vm.polygonSubscription.id);\n            vm.polygonSubscription = null;\n        }\n    }\n\n    function saveField() {\n        const formValues = vm.editFieldFormGroup.value;\n        vm.field.name = formValues.name;\n        vm.field.label = formValues.label;\n        return assetService.saveAsset(vm.field);\n    }\n\n    function saveAttributes(entityId) {\n        let cropType = vm.editFieldFormGroup.get('cropType').value;\n        let minMoistureThreshold = vm.editFieldFormGroup.get('minMoistureThreshold').value;\n        let maxMoistureThreshold = vm.editFieldFormGroup.get('maxMoistureThreshold').value;\n        let attributesArray = [\n            {key: 'cropType', value: cropType},\n            {key: 'minMoistureThreshold', value: minMoistureThreshold},\n            {key: 'maxMoistureThreshold', value: maxMoistureThreshold}\n        ];\n        return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n    }\n    \n    function restorePolygon() {\n        if (vm.polygonChanged) {\n            return attributeService.saveEntityAttributes(vm.field.id, \"SERVER_SCOPE\", [{key: 'perimeter', value: JSON.parse(vm.perimeter)}]);\n        } else {\n            return widgetContext.rxjs.of(null);\n        }\n    }\n    \n    function loadField() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', ['cropType', 'minMoistureThreshold', 'maxMoistureThreshold', 'perimeter']),\n            assetService.getAsset(entityId.id)\n        ]).subscribe(\n            function (data) {\n                var attributes = data[0];\n                for (var i = 0; i < attributes.length; i ++) {\n                    if (attributes[i].key === 'cropType') {\n                        var cropType = attributes[i].value;\n                        vm.editFieldFormGroup.get('cropType').patchValue(cropType, {emitEvent: false});\n                    } else if (attributes[i].key === 'minMoistureThreshold') {\n                        var minMoistureThreshold = attributes[i].value;\n                        vm.editFieldFormGroup.get('minMoistureThreshold').patchValue(minMoistureThreshold, {emitEvent: false});\n                    } else if (attributes[i].key === 'maxMoistureThreshold') {\n                        var maxMoistureThreshold = attributes[i].value;\n                        vm.editFieldFormGroup.get('maxMoistureThreshold').patchValue(maxMoistureThreshold, {emitEvent: false});\n                    } else if (attributes[i].key === 'perimeter') {\n                        vm.perimeter = JSON.stringify(attributes[i].value);\n                    }\n                }\n                vm.field = data[1];\n                vm.editFieldFormGroup.get('name').patchValue(vm.field.name, {emitEvent: false});\n                vm.editFieldFormGroup.get('label').patchValue(vm.field.label, {emitEvent: false});\n                createPolygonSubscription();\n            }\n        );\n    }\n\n}\n",
            "customResources": [],
            "openInSeparateDialog": false,
            "openInPopover": false,
            "id": "440ca790-1b01-c774-c4f9-065a2aaa2dce"
          },
          {
            "name": "Delete field",
            "icon": "delete",
            "useShowWidgetActionFunction": null,
            "showWidgetActionFunction": "return true;",
            "type": "customPretty",
            "customHtml": "",
            "customCss": ".sf-field-delete-dialog .mat-mdc-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-icon-button.mat-primary, .sf-field-delete-dialog .mat-mdc-outlined-button.mat-primary:not(:disabled) {\n    color: #5553AF;\n}\n\n.sf-field-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    color: #fff;\n}\n\n.sf-field-delete-dialog .mat-mdc-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-unelevated-button.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-mini-fab.mat-primary:not(:disabled), .sf-field-delete-dialog .mat-mdc-raised-button.mat-primary:not(:disabled) {\n    background-color: #6F74F2;\n}\n\n.sf-field-delete-dialog .mat-mdc-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-unelevated-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-raised-button .mat-mdc-button-persistent-ripple::before, .sf-field-delete-dialog .mat-mdc-outlined-button .mat-mdc-button-persistent-ripple::before {\n    background-color: #6F74F2;\n}\n",
            "customFunction": "let $injector = widgetContext.$scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n\nopenDeleteEntityDialog();\n\nfunction openDeleteEntityDialog() {\n    let title = 'Delete field \\'' +\n                 entityName + '\\'';\n    let content = 'Are you sure you want to delete the field \\'' + entityName + '\\'?';\n    dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n        function(result) {\n            if (result) {\n                deleteEntity();\n            }\n        }\n    );\n    $('tb-confirm-dialog').addClass('sf-field-delete-dialog');\n}\n\nfunction deleteEntity() {\n    deleteEntityObservable(entityId).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable(entityId) {\n    return assetService.deleteAsset(entityId.id);\n}\n\nfunction showErrorDialog() {\n    let title = 'Error';\n    let content = 'An error occurred while deleting the field. Please try again.';\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n",
            "customResources": [],
            "openInSeparateDialog": false,
            "openInPopover": false,
            "id": "76de68f0-6177-7d13-0fb7-5af0f56b25dc"
          }
        ]
      },
      "showTitleIcon": true,
      "titleTooltip": "",
      "enableDataExport": false,
      "widgetStyle": {},
      "widgetCss": "mat-row {\n    cursor: pointer;\n}",
      "pageSize": 1024,
      "noDataDisplayMessage": "",
      "titleIcon": "mdi:texture-box",
      "iconColor": "rgba(0, 0, 0, 0.87)",
      "iconSize": "20px",
      "margin": "0px"
    },
    "row": 0,
    "col": 0,
    "id": "8ce15aad-9ab2-55ce-2628-a663814d27b1",
    "typeFullFqn": "system.cards.entities_table"
  },
  "aliasesInfo": {
    "datasourceAliases": {
      "0": {
        "alias": "Fields",
        "filter": {
          "type": "assetType",
          "resolveMultiple": true,
          "assetNameFilter": "",
          "assetTypes": [
            "SI Field"
          ]
        }
      }
    },
    "targetDeviceAlias": null
  },
  "filtersInfo": {
    "datasourceFilters": {}
  },
  "originalSize": {
    "sizeX": 12,
    "sizeY": 6
  },
  "originalColumns": 24
}