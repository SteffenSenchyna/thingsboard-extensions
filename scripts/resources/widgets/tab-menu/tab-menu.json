{
  "fqn": "menu",
  "name": "Menu",
  "deprecated": false,
  "image": "tb-image;/api/images/tenant/Screenshot from 2025-03-04 08-44-39.png",
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 10,
    "sizeY": 1.5,
    "resources": [],
    "templateHtml": "<div id=\"navContainer\">\n    <div class=\"navBlock\">\n        <div class=\"navItem menuItem\" style=\"margin-left: 0px\" (click)=\"onNavClick($event, '1')\">\n            <span class='nav-item-text'>Details</span>\n        </div>\n        <div class=\"navItem menuItem\" (click)=\"onNavClick($event, '2')\">\n            <span class='nav-item-text'>Analysis</span>\n        </div>\n    </div>\n    <div class=\"modeBlock\">\n        <div class=\"mode\" [ngClass]=\"{'activeMode': currentMode == 'light'}\" (click)=\"changeMode('light')\">\n            <img [src]=\"'/api/images/tenant/wb_sunny.png' | image | async\" />\n        </div>\n        <div class=\"mode\" [ngClass]=\"{'activeMode': currentMode == 'dark'}\" (click)=\"changeMode('dark')\">\n            <img [src]=\"'/api/images/tenant/dark_mode.png' | image | async\" />\n        </div>\n    </div>\n</div>",
    "templateCss": "#navContainer {\n    overflow: hidden;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#navContainer .navBlock {\n    display: flex;\n    justify-content: left;\n    align-content: center;\n    align-items: center;\n    flex: 1;\n    width: 100%;\n    height: 100%;\n}\n\n.buttonBlock {\n    width: 10%;\n    display: flex;\n    justify-content: right;\n    align-items: center;\n}\n\n.nav-item-text {\n    text-align: center;\n}\n\n#navContainer .navBlock .navItem {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: #05224E;\n    cursor: pointer;\n    font-size: 14px;\n    border-bottom: 2px solid #BABFC4;\n}\n\n#navContainer .navBlock .menuItem {\n    width: 15%;\n    cursor: pointer;\n    height: 100%;\n}\n\n#navContainer .navBlock .navItem.active {\n    display: flex;\n    justify-content: center;\n    color: var(--tb-primary-500);\n    font-weight: 500;\n    border-bottom: 3px solid var(--tb-primary-500);\n}\n\n.modeBlock {\n    background-color: #9E9E9E;\n    border-radius: 20px;\n    width: 68px;\n    padding: 2px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 36px;\n}\n\n.mode {\n    border-radius: 50%;    \n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n}\n\n.activeMode { \n    background-color: var(--tb-primary-500);\n}\n",
    "controllerScript": "self.onInit = function() {\n    if(self.ctx.$scope.ctx.stateController){\n        let currentState = self.ctx.$scope.ctx.stateController.stateValue;\n        let navItems = self.ctx.$container.find('.navItem');\n        let size = navItems.length;\n        \n        for(let i=0;i<size;i++){\n            if(currentState === \"truck\"){\n                navItems[0].classList.add('active');\n            } else {\n                navItems[1].classList.add('active');\n            }\n        }\n        \n        self.ctx.$scope.onNavClick = function(event, actionName) {\n            let element;\n        \n            let activeMenu = self.ctx.$container.find('.active');\n            for(let i=0; i<activeMenu.length; i++){\n                activeMenu[i].classList.remove('active')\n            }\n            if(event.target.tagName.toLowerCase()!='div'){\n                element = event.target.parentElement;\n            }else{\n                element = event.target;\n            }\n            \n            element.classList.add('active');\n            \n            let params = self.ctx.$scope.ctx.stateController.getStateParams();\n            let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\n            let actionEvent;\n            \n            if (actionEventDescriptors.length) {\t\n                actionEventDescriptors.forEach(action=>{\n                    if(action.name == actionName){\n                        actionEvent = action;\n                    }\n                });\n                \n                setTimeout(() => {\n                    self.ctx.$scope.ctx.actionsApi.handleWidgetAction(null, actionEvent, null, null);\t\n                        \n                }, 0);\t\n            }\n        }\n    }\n    \n    self.ctx.$scope.currentMode = `light`;\n    \n    self.ctx.$scope.changeMode = function(mode){\n        if(self.ctx.$scope.currentMode != mode){\n            self.ctx.$scope.currentMode = mode;\n            self.ctx.detectChanges();\n            let actionEventDescriptors = self.ctx.$scope.ctx.actionsApi.getActionDescriptors('elementClick');\n            let actionEvent;\n            \n            if (actionEventDescriptors.length) {\t\n                actionEventDescriptors.forEach(action=>{\n                    if(action.name == mode){\n                        actionEvent = action;\n                    }\n                });\n                    \n                setTimeout(() => {\n                    self.ctx.$scope.ctx.actionsApi.handleWidgetAction(null, actionEvent, null, null);\n                }, 0);\t\n            }\n        }\n    }\n};\n\n\nself.onDataUpdated = function(){\n    if(self.ctx.data[0].data[0]){\n        if(self.ctx.data[0].data[0][1] == \"true\"){\n            self.ctx.$scope.changeMode(\"dark\");\n        } else self.ctx.$scope.currentMode = `light`;\n    } else self.ctx.$scope.currentMode = `light`;\n}\n\nself.actionSources = function() {\n    return {\n        'elementClick': {\n            name: 'widget-action.element-click',\n            multiple: true\n        }\n    };\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {\n}\n",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#FFFFFF00\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Attributes card\",\"decimals\":null,\"dropShadow\":false,\"enableFullscreen\":false,\"enableDataExport\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\"}"
  },
  "resources": [
    {
      "link": "/api/images/tenant/Screenshot from 2025-03-04 08-44-39.png",
      "title": "Screenshot from 2025-03-04 08-44-39.png",
      "type": "IMAGE",
      "subType": "IMAGE",
      "fileName": "Screenshot from 2025-03-04 08-44-39.png",
      "publicResourceKey": "ybLdnIJnohXmJ8iadr80BhOFvAF8YWPz",
      "mediaType": "image/png",
      "data": "",
      "public": true
    }
  ],
  "scada": false,
  "tags": null
}